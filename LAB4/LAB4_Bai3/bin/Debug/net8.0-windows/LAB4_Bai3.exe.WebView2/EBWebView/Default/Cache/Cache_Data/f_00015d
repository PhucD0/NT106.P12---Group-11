<!DOCTYPE html><html
	class="hasSidebar hasPageActions hasBreadcrumb conceptual has-default-focus theme-light"
	lang="en-us"
	dir="ltr"
	data-authenticated="false"
	data-auth-status-determined="false"
	data-target="docs"
	x-ms-format-detection="none">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta property="og:title" content="Make HTTP requests with the HttpClient - .NET" />
	<meta property="og:type" content="website" />
	<meta property="og:url" content="https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/http/httpclient" /><meta property="og:description" content="Learn how to make HTTP requests and handle responses with the HttpClient in .NET." /><meta property="og:image" content="https://learn.microsoft.com/dotnet/media/dotnet-logo.png" />

	<meta property="og:image:alt" content="Make HTTP requests with the HttpClient - .NET | Microsoft Learn" />

	<meta name="twitter:card" content="summary" />

	<meta name="twitter:site" content="@MicrosoftLearn" />

	<meta name="color-scheme" content="light dark"><meta name="apiPlatform" content="dotnet" />
<meta name="author" content="IEvangelist" />
<meta name="breadcrumb_path" content="/dotnet/breadcrumb/toc.json" />
<meta name="depot_name" content="VS.core-docs" />
<meta name="description" content="Learn how to make HTTP requests and handle responses with the HttpClient in .NET." />
<meta name="document_id" content="4e2c563b-3150-f2a1-2afa-711cf3c022bf" />
<meta name="document_version_independent_id" content="857f2b65-3e05-2cb7-9820-05dddad22605" />
<meta name="feedback_help_link_type" content="" />
<meta name="feedback_help_link_url" content="" />
<meta name="feedback_product_url" content="https://aka.ms/feedback/report?space=61" />
<meta name="feedback_system" content="OpenSource" />
<meta name="git_commit_id" content="403bc36bbfa007432c01a71de0c84784bd8bba88" />
<meta name="gitcommit" content="https://github.com/dotnet/docs/blob/403bc36bbfa007432c01a71de0c84784bd8bba88/docs/fundamentals/networking/http/httpclient.md" />
<meta name="locale" content="en-us" />
<meta name="ms.author" content="dapine" />
<meta name="ms.date" content="11/02/2023" />
<meta name="ms.devlang" content="dotnet" />
<meta name="ms.service" content="dotnet-fundamentals" />
<meta name="ms.topic" content="conceptual" />
<meta name="original_content_git_url" content="https://github.com/dotnet/docs/blob/live/docs/fundamentals/networking/http/httpclient.md" />
<meta name="page_type" content="conceptual" />
<meta name="pdf_url_template" content="https://learn.microsoft.com/pdfstore/en-us/VS.core-docs/{branchName}{pdfName}" />
<meta name="schema" content="Conceptual" />
<meta name="search.mshattr.devlang" content="csharp" />
<meta name="show_latex" content="true" />
<meta name="site_name" content="Docs" />
<meta name="toc_rel" content="../../toc.json" />
<meta name="uhfHeaderId" content="MSDocsHeader-DotNet" />
<meta name="updated_at" content="2024-08-15 08:08 AM" />
<meta name="word_count" content="3819" />
<meta name="persistent_id" content="3faeb75e-cd0b-c628-2c5e-21620692fd4d" />
	
	<meta name="cmProducts" content="https://authoring-docs-microsoft.poolparty.biz/devrel/7696cda6-0510-47f6-8302-71bb5d2e28cf" data-source="generated" />
	
	<meta name="spProducts" content="https://authoring-docs-microsoft.poolparty.biz/devrel/69c76c32-967e-4c65-b89a-74cc527db725" data-source="generated" />
	<meta name="scope" content=".NET" /><meta name="github_feedback_content_git_url" content="https://github.com/dotnet/docs/blob/main/docs/fundamentals/networking/http/httpclient.md" /><link href="https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/http/httpclient" rel="canonical"><title>Make HTTP requests with the HttpClient - .NET | Microsoft Learn</title><link rel="stylesheet" href="/static/assets/0.4.028726178/styles/site-ltr.css">

	<script id="msdocs-script">
	var msDocs = {environment: {
			supportLevel: 'production',
			accessLevel: 'online',
			reviewFeatures: false,
			systemContent: true,
			azurePortalHostname: 'portal.azure.com',
			legacyHosting: false,
			siteName: 'learn',
		},data: {
			timeOrigin: Date.now(),
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pageTemplate: 'Conceptual',
			brand: '',
			context: {},
			hasBinaryRating: true,
			feedbackHelpLinkType:'',
			feedbackHelpLinkUrl:'',
			standardFeedback: false,
			showFeedbackReport: false,
			enableTutorialFeedback: false,
			feedbackSystem: 'OpenSource',
			feedbackGitHubRepo: 'dotnet/docs',
			feedbackProductUrl: 'https://aka.ms/feedback/report?space=61',extendBreadcrumb: false,isEditDisplayable: true,
			hideViewSource: false,
			hasPageActions: true,
			hasPrintButton: true,
			hasBookmark: true,
			hasShare: true,
			isPermissioned: false,
			isPrivateUnauthorized: false,hasRecommendations: true,openSourceFeedback: true,
			openSourceFeedbackIssueUrl: 'https://github.com/dotnet/docs/issues/new?template=z-customer-feedback.yml',
			openSourceFeedbackIssueTitle: '',
			openSourceFeedbackIssueLabels: '',contributors: [{ name: "IEvangelist", url: "https://github.com/IEvangelist" },{ name: "warrenZY", url: "https://github.com/warrenZY" },{ name: "ManickaP", url: "https://github.com/ManickaP" },{ name: "wenz", url: "https://github.com/wenz" },{ name: "antonfirsov", url: "https://github.com/antonfirsov" },{ name: "gewarren", url: "https://github.com/gewarren" }],mathjax: {},},
		functions:{}
	};
	</script><script src="https://wcpstatic.microsoft.com/mscc/lib/v2/wcp-consent.js"></script>
	<script src="https://js.monitor.azure.com/scripts/c/ms.jsll-4.min.js"></script><script src="/static/assets/0.4.028726178/global/deprecation.js"></script><script src="/static/assets/0.4.028726178/scripts/en-us/index-docs.js"></script></head>

<body lang="en-us" dir="ltr">
	<div class="header-holder has-default-focus">
		<a href="#main" style="z-index: 1070" class="outline-color-text visually-hidden-until-focused position-fixed inner-focus focus-visible top-0 left-0 right-0 padding-xs text-align-center  has-body-background" tabindex="1">Skip to main content</a><div hidden id="cookie-consent-holder" data-test-id="cookie-consent-container"></div>

		<div id="unsupported-browser" style="
			background-color: white;
			color: black;
			padding: 16px;
			border-bottom: 1px solid grey;"
			hidden
		>
			<div style="max-width: 800px; margin: 0 auto;">
				<p style="font-size: 24px">This browser is no longer supported.</p>
				<p style="font-size: 16px; margin-top: 16px;">Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support.</p>
				<div style="margin-top: 12px;">
					<a href="https://go.microsoft.com/fwlink/p/?LinkID=2092881 "
						style="
						background-color: #0078d4;
						border: 1px solid #0078d4;
						color: white;
						padding: 6px 12px;
						border-radius: 2px;
						display: inline-block;
						">Download Microsoft Edge</a>
					<a href="https://learn.microsoft.com/en-us/lifecycle/faq/internet-explorer-microsoft-edge"
						style="
							background-color: white;
							padding: 6px 12px;
							border: 1px solid #505050;
							color: #171717;
							border-radius: 2px;
							display: inline-block;
							">More info about Internet Explorer and Microsoft Edge</a>
				</div>
			</div>
		</div>
		<!-- liquid-tag banners global -->

		<!-- site header -->
		<header id="ms--site-header" data-test-id="site-header-wrapper" role="banner" itemscope="itemscope" itemtype="http://schema.org/Organization">
			<div id="ms--mobile-nav" class="site-header display-none-tablet padding-inline-none gap-none" data-bi-name="mobile-header" data-test-id="mobile-header"></div>
			<div id="ms--primary-nav" class="site-header display-none display-flex-tablet" data-bi-name="L1-header" data-test-id="primary-header"></div>
			<div id="ms--secondary-nav" class="site-header display-none display-flex-tablet" data-bi-name="L2-header" data-test-id="secondary-header"></div>
		</header><div id="content-header" class="content-header uhf-container has-padding has-default-focus border-bottom-none" data-bi-name="content-header">
				<div class="content-header-controls margin-xxs margin-inline-sm-tablet">
					<button type="button" class="contents-button button button-sm margin-right-xxs" data-bi-name="contents-expand" aria-haspopup="true" data-contents-button>
						<span class="icon"><span class="docon docon-menu" aria-hidden="true"></span></span>
						<span class="contents-expand-title">Table of contents</span>
					</button>
					<button type="button" class="ap-collapse-behavior ap-expanded button button-sm" data-bi-name="ap-collapse" aria-controls="action-panel">
						<span class="icon"><span class="docon docon-exit-mode" aria-hidden="true"></span></span>
						<span>Exit focus mode</span>
					</button>
				</div>
			</div><div id="disclaimer-holder" class="has-overflow-hidden has-default-focus">
			<!-- liquid-tag banners sectional -->
		</div>
	</div>

	<div class="mainContainer  uhf-container has-default-focus" data-bi-name="body">

		<div class="columns has-large-gaps is-gapless-mobile "><div id="left-container" class="left-container is-hidden-mobile column is-one-third-tablet is-one-quarter-desktop">
				<nav id="affixed-left-container" class="margin-top-sm-tablet position-sticky display-flex flex-direction-column" aria-label="Primary"></nav>
			</div><!-- .primary-holder -->
			<section class="primary-holder column is-two-thirds-tablet is-three-quarters-desktop">
				<!--div.columns -->
				<div class="columns is-gapless-mobile has-large-gaps "><div id="main-column" class="column  is-full is-8-desktop">

						<main id="main" class="" role="main" data-bi-name="content" lang="en-us" dir="ltr"><!-- article-header -->
							<div id="article-header" class="background-color-body margin-top-sm-tablet margin-bottom-xs display-none-print">
								<div class="display-flex align-items-center "><details id="article-header-breadcrumbs-overflow-popover" class="popover" data-for="article-header-breadcrumbs">
										<summary class="button button-clear button-primary button-sm inner-focus" aria-label="All breadcrumbs">
											<span class="icon">
												<span class="docon docon-more"></span>
											</span>
										</summary>
										<div id="article-header-breadcrumbs-overflow" class="popover-content padding-none">

										</div>
									</details>

									<bread-crumbs id="article-header-breadcrumbs" data-test-id="article-header-breadcrumbs" class="overflow-hidden flex-grow-1 margin-right-sm margin-right-md-tablet margin-right-lg-desktop margin-left-negative-xxs padding-left-xxs"></bread-crumbs><div id="article-header-page-actions"  class="opacity-none margin-left-auto display-flex flex-wrap-no-wrap align-items-stretch"><a
											id="lang-link-tablet"
											class="button button-primary button-clear button-sm display-none display-inline-flex-tablet"
											title="Read in English" data-bi-name="language-toggle"
											data-read-in-link
											hidden>
											<span class="icon margin-none" aria-hidden="true" data-read-in-link-icon>
												<span class="docon docon-locale-globe"></span>
											</span>
											<span class="is-visually-hidden" data-read-in-link-text>Read in English</span>
										</a><button
												type="button"
												class="collection button button-clear button-sm button-primary display-none display-inline-flex-tablet"
												data-list-type="collection"
												data-bi-name="collection"
												title="Add to collection">
												<span class="icon margin-none" aria-hidden="true">
													<span class="docon docon-circle-addition"></span>
												</span>
												<span class="collection-status is-visually-hidden">Save</span>
											</button><a	data-contenteditbtn
												class="button button-clear button-sm text-decoration-none button-primary display-none display-inline-flex-tablet"
												aria-label="Edit"
												title="Edit This Document"
												data-bi-name="edit"
														href="https://github.com/dotnet/docs/blob/main/docs/fundamentals/networking/http/httpclient.md"
														data-original_content_git_url="https://github.com/dotnet/docs/blob/live/docs/fundamentals/networking/http/httpclient.md"
														data-original_content_git_url_template="{repo}/blob/{branch}/docs/fundamentals/networking/http/httpclient.md"
														data-pr_repo=""
														data-pr_branch="">
												<span class="icon margin-none" aria-hidden="true">
													<span class="docon docon-edit-outline"></span>
												</span>
											</a>
										<details class="popover popover-right" id="article-header-page-actions-overflow">
											<summary class="justify-content-flex-start button button-clear button-sm button-primary" aria-label="More actions" title="More actions">
												<span class="icon" aria-hidden="true">
													<span class="docon docon-more-vertical"></span>
												</span>
											</summary>
											<div class="popover-content padding-xs"><button
														data-page-action-item="overflow-mobile"
														type="button"
														class="justify-content-flex-start button-block button-sm has-inner-focus button button-clear display-none-tablet"
														data-bi-name="contents-expand"
														data-contents-button
														data-popover-close>
														<span class="icon">
															<span class="docon docon-editor-list-bullet" aria-hidden="true"></span>
														</span><span class="contents-expand-title">Table of contents</span></button><a
													id="lang-link-overflow"
													class="justify-content-flex-start button-sm has-inner-focus button button-clear button-block display-none-tablet"
													title="Read in English" data-bi-name="language-toggle"
													data-page-action-item="overflow-mobile"
													data-check-hidden="true"
													data-read-in-link
													hidden
													>
													<span class="icon" aria-hidden="true" data-read-in-link-icon>
														<span class="docon docon-locale-globe"></span>
													</span>
													<span data-read-in-link-text>Read in English</span>
												</a><button
														type="button"
														class="collection justify-content-flex-start button button-clear button-sm has-inner-focus button-block display-none-tablet"
														data-list-type="collection"
														data-bi-name="collection"
														title="Save"
														data-page-action-item="overflow-mobile"
														data-check-hidden="true"
														data-popover-close>
														<span class="icon" aria-hidden="true">
															<span class="docon docon-circle-addition"></span>
														</span>
														<span class="collection-status">Save</span>
													</button>

			 										
													<button
													 	type="button"
														class="collection justify-content-flex-start button button-clear button-sm has-inner-focus button-block display-none-tablet"
														data-list-type="plan"
														data-bi-name="plan"
														title="Add to Plan"
														data-page-action-item="overflow-mobile"
														data-check-hidden="true"
														data-popover-close
														hidden>
														<span class="icon" aria-hidden="true">
															<span class="docon docon-circle-addition"></span>
														</span>
														<span class="plan-status">Add to Plan</span>
													</button><a	data-contenteditbtn
														class="button button-clear button-block button-sm has-inner-focus justify-content-flex-start text-decoration-none display-none-tablet"
														aria-label="Edit"
														title="Edit This Document"
														data-bi-name="edit"
																href="https://github.com/dotnet/docs/blob/main/docs/fundamentals/networking/http/httpclient.md"
																data-original_content_git_url="https://github.com/dotnet/docs/blob/live/docs/fundamentals/networking/http/httpclient.md"
																data-original_content_git_url_template="{repo}/blob/{branch}/docs/fundamentals/networking/http/httpclient.md"
																data-pr_repo=""
																data-pr_branch="">
														<span class="icon" aria-hidden="true">
															<span class="docon docon-edit-outline"></span>
														</span>
														<span>Edit</span>
													</a><div aria-hidden="true" class="margin-none" data-page-action-item="overflow-all"></div>
														<hr class="display-none-tablet margin-bottom-xxs margin-top-xxs" />
														<h4 class="font-size-sm padding-left-xxs">Share via</h4>

													<a class="button button-clear button-sm button-block has-inner-focus text-decoration-none justify-content-flex-start share-facebook" data-bi-name="facebook" data-page-action-item="overflow-all">
															<span class="icon" aria-hidden="true">
																<span class="docon docon-facebook-share font-size-md color-primary"></span>
															</span>
															<span class="margin-left-xxs">Facebook</span>
														</a>
														<a class="button button-clear button-sm has-inner-focus button-block text-decoration-none justify-content-flex-start share-twitter" data-bi-name="twitter" data-page-action-item="overflow-all">
															<span class="icon" aria-hidden="true">
																<span class="docon docon-xlogo-share font-size-xxs"></span>
															</span>
															<span class="margin-left-xxs">x.com</span>
														</a>
														<a class="button button-clear button-sm has-inner-focus button-block text-decoration-none justify-content-flex-start share-linkedin" data-bi-name="linkedin" data-page-action-item="overflow-all">
															<span class="icon" aria-hidden="true">
																<span class="docon docon-linked-in-logo font-size-sm color-primary"></span>
															</span>
															<span class="margin-left-xxs">LinkedIn</span>
														</a>
														<a class="button button-clear button-sm button-block has-inner-focus text-decoration-none justify-content-flex-start margin-bottom-xxs share-email" data-bi-name="email" data-page-action-item="overflow-all">
															<span class="icon" aria-hidden="true">
																<span class="docon docon-mail-message font-size-sm color-primary"></span>
															</span>
															<span class="margin-left-xxs">Email</span>
														</a><hr />
													<button
														class="button button-block button-clear button-sm justify-content-flex-start has-inner-focus margin-top-xxs"
														title="Print"
														type="button"
														aria-label="Print"
														data-bi-name="print"
														data-page-action-item="overflow-all"
														data-popover-close
														data-print-page
														data-check-hidden="true">
														<span class="icon" aria-hidden="true">
															<span class="docon docon-print font-size-sm color-primary"></span>
														</span>
														<span class="margin-left-xxs">Print</span>
													</button>
											</div>
										</details>
										
									</div></div>
							</div>
							<!-- end article-header --><div>
								<button type="button" class="border contents-button button button-clear button-sm is-hidden-tablet has-inner-focus" data-bi-name="contents-expand" data-contents-button hidden>
									<span class="icon">
										<span class="docon docon-editor-list-bullet" aria-hidden="true"></span>
									</span><span class="contents-expand-title">Table of contents</span></button>
							</div><!-- end mobile-contents button  -->

							<div class="content "><h1 id="make-http-requests-with-the-httpclient-class">Make HTTP requests with the HttpClient class</h1><div class="display-flex justify-content-space-between align-items-center flex-wrap-wrap page-metadata-container">
										<div class="margin-right-xxs">
											<ul class="metadata page-metadata" data-bi-name="page info" lang="en-us" dir="ltr"><li>Article</li><li class="visibility-hidden-visual-diff"><time class="is-invisible" data-article-date aria-label="Article review date" datetime="2023-11-02T08:00:00Z" data-article-date-source="calculated">11/02/2023</time>
															</li><li class="contributors-holder display-none-print">
															<button aria-label="View all contributors" class="contributors-button link-button" data-bi-name="contributors" title="View all contributors">6 contributors</button>
														</li></ul>
										</div>
<div id="user-feedback" class="margin-block-xxs display-none-print" data-hide-on-archived>
	<button
		id="user-feedback-button"
		data-test-id="conceptual-feedback-button"
		class="button button-sm button-clear button-primary"
		type="button"
		data-bi-name="user-feedback-button"
		data-user-feedback-button
	>
		<span class="icon" aria-hidden="true">
			<span class="docon docon-like"></span>
		</span>
		<span>Feedback</span>
	</button>
</div></div><nav id="center-doc-outline" class="doc-outline is-hidden-desktop display-none-print margin-bottom-sm" data-bi-name="intopic toc" aria-label="In this article">
											<h2 id="ms--in-this-article" class="title is-6 margin-block-xs">In this article</h2>
										</nav><!-- <content> --><p>In this article, you'll learn how to make HTTP requests and handle responses with the <code>HttpClient</code> class.</p>
<div class="IMPORTANT">
<p>Important</p>
<p>All of the example HTTP requests target one of the following URLs:</p>
<ul>
<li><a href="https://jsonplaceholder.typicode.com" data-linktype="external">https://jsonplaceholder.typicode.com</a>: Free fake API for testing and prototyping.</li>
<li><a href="https://www.example.com" data-linktype="external">https://www.example.com</a>: This domain is for use in illustrative examples in documents.</li>
</ul>
</div>
<p>HTTP endpoints commonly return JavaScript Object Notation (JSON) data, but not always. For convenience, the optional <a href="https://www.nuget.org/packages/System.Net.Http.Json" data-linktype="external">System.Net.Http.Json</a> NuGet package provides several extension methods for <code>HttpClient</code> and <code>HttpContent</code> that perform automatic serialization and deserialization using <code>System.Text.Json</code>. The examples that follow call attention to places where these extensions are available.</p>
<div class="TIP">
<p>Tip</p>
<p>All of the source code from this article is available in the <a href="https://github.com/dotnet/docs/tree/main/docs/fundamentals/networking/snippets/httpclient" data-linktype="external">GitHub: .NET Docs</a> repository.</p>
</div>
<h2 id="create-an-httpclient">Create an <code>HttpClient</code></h2>
<p>Most of the following examples reuse the same <code>HttpClient</code> instance, and therefore only need to be configured once. To create an <code>HttpClient</code>, use the <code>HttpClient</code> class constructor. For more information, see <a href="httpclient-guidelines" data-linktype="relative-path">Guidelines for using HttpClient</a>.</p>
<pre><code class="lang-csharp">// HttpClient lifecycle management best practices:
// https://learn.microsoft.com/dotnet/fundamentals/networking/http/httpclient-guidelines#recommended-use
private static HttpClient sharedClient = new()
{
    BaseAddress = new Uri("https://jsonplaceholder.typicode.com"),
};
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Instantiates a new <code>HttpClient</code> instance as a <code>static</code> variable. As per the <a href="httpclient-guidelines" data-linktype="relative-path">guidelines</a>, it's recommended to reuse <code>HttpClient</code> instances during the application's lifecycle.</li>
<li>Sets the <a href="/en-us/dotnet/api/system.net.http.httpclient.baseaddress#system-net-http-httpclient-baseaddress" class="no-loc" data-linktype="absolute-path">HttpClient.BaseAddress</a> to <code>"https://jsonplaceholder.typicode.com"</code>.</li>
</ul>
<p>This <code>HttpClient</code> instance uses the base address when making subsequent requests. To apply other configuration, consider:</p>
<ul>
<li>Setting <a href="/en-us/dotnet/api/system.net.http.httpclient.defaultrequestheaders#system-net-http-httpclient-defaultrequestheaders" class="no-loc" data-linktype="absolute-path">HttpClient.DefaultRequestHeaders</a>.</li>
<li>Applying a nondefault <a href="/en-us/dotnet/api/system.net.http.httpclient.timeout#system-net-http-httpclient-timeout" class="no-loc" data-linktype="absolute-path">HttpClient.Timeout</a>.</li>
<li>Specifying the <a href="/en-us/dotnet/api/system.net.http.httpclient.defaultrequestversion#system-net-http-httpclient-defaultrequestversion" class="no-loc" data-linktype="absolute-path">HttpClient.DefaultRequestVersion</a>.</li>
</ul>
<div class="TIP">
<p>Tip</p>
<p>Alternatively, you can create <code>HttpClient</code> instances using a factory-pattern approach that allows you to configure any number of clients and consume them as dependency injection services. For more information, see <a href="../../../core/extensions/httpclient-factory" data-linktype="relative-path">HTTP client factory with .NET</a>.</p>
</div>
<h2 id="make-an-http-request">Make an HTTP request</h2>
<p>To make an HTTP request, you call any of the following APIs:</p>
<table>
<thead>
<tr>
<th>HTTP method</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GET</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.getasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetAsync</a></td>
</tr>
<tr>
<td><code>GET</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.getbytearrayasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetByteArrayAsync</a></td>
</tr>
<tr>
<td><code>GET</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.getstreamasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetStreamAsync</a></td>
</tr>
<tr>
<td><code>GET</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.getstringasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetStringAsync</a></td>
</tr>
<tr>
<td><code>POST</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.postasync" class="no-loc" data-linktype="absolute-path">HttpClient.PostAsync</a></td>
</tr>
<tr>
<td><code>PUT</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.putasync" class="no-loc" data-linktype="absolute-path">HttpClient.PutAsync</a></td>
</tr>
<tr>
<td><code>PATCH</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.patchasync" class="no-loc" data-linktype="absolute-path">HttpClient.PatchAsync</a></td>
</tr>
<tr>
<td><code>DELETE</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.deleteasync" class="no-loc" data-linktype="absolute-path">HttpClient.DeleteAsync</a></td>
</tr>
<tr>
<td><sup>†</sup><code>USER SPECIFIED</code></td>
<td><a href="/en-us/dotnet/api/system.net.http.httpclient.sendasync" class="no-loc" data-linktype="absolute-path">HttpClient.SendAsync</a></td>
</tr>
</tbody>
</table>
<blockquote>
<p><sup>†</sup>A <code>USER SPECIFIED</code> request indicates that the <code>SendAsync</code> method accepts any valid <a href="/en-us/dotnet/api/system.net.http.httpmethod" class="no-loc" data-linktype="absolute-path">HttpMethod</a>.</p>
</blockquote>
<div class="WARNING">
<p>Warning</p>
<p>Making HTTP requests is considered network I/O-bound work. While there is a synchronous <a href="/en-us/dotnet/api/system.net.http.httpclient.send" class="no-loc" data-linktype="absolute-path">HttpClient.Send</a> method, it is recommended to use the asynchronous APIs instead, unless you have good reason not to.</p>
</div>
<div class="NOTE">
<p>Note</p>
<p>While targeting Android devices (such as with .NET MAUI development), you must add <code>android:usesCleartextTraffic="true"</code> to <code>&lt;application&gt;&lt;/application&gt;</code> in <em>AndroidManifest.xml</em>. This enables clear-text traffic, such as HTTP requests, which is otherwise disabled by default due to Android security policies. Consider the following example XML settings:</p>
<pre><code class="lang-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"&gt;
  &lt;application android:usesCleartextTraffic="true"&gt;&lt;/application&gt;
  &lt;!-- omitted for brevity --&gt;
&lt;/manifest&gt;
</code></pre>
<p>For more information, see <a href="/en-us/dotnet/maui/data-cloud/local-web-services?view=net-maui-8.0#enable-clear-text-network-traffic-for-the-localhost-domain" data-linktype="absolute-path">Enable clear-text network traffic for the localhost domain</a>.</p>
</div>
<h3 id="http-content">HTTP content</h3>
<p>The <a href="/en-us/dotnet/api/system.net.http.httpcontent" class="no-loc" data-linktype="absolute-path">HttpContent</a> type is used to represent an HTTP entity body and corresponding content headers. For HTTP methods (or request methods) that require a body, <code>POST</code>, <code>PUT</code>, and <code>PATCH</code>, you use the <a href="/en-us/dotnet/api/system.net.http.httpcontent" class="no-loc" data-linktype="absolute-path">HttpContent</a> class to specify the body of the request. Most examples show how to prepare the  <a href="/en-us/dotnet/api/system.net.http.stringcontent" class="no-loc" data-linktype="absolute-path">StringContent</a> subclass with a JSON payload, but other subclasses exist for different <a href="https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types" data-linktype="external">content (MIME) types</a>.</p>
<ul>
<li><a href="/en-us/dotnet/api/system.net.http.bytearraycontent" class="no-loc" data-linktype="absolute-path">ByteArrayContent</a>: Provides HTTP content based on a byte array.</li>
<li><a href="/en-us/dotnet/api/system.net.http.formurlencodedcontent" class="no-loc" data-linktype="absolute-path">FormUrlEncodedContent</a>: Provides HTTP content for name/value tuples encoded using <code>"application/x-www-form-urlencoded"</code> MIME type.</li>
<li><a href="/en-us/dotnet/api/system.net.http.json.jsoncontent" class="no-loc" data-linktype="absolute-path">JsonContent</a>: Provides HTTP content based on JSON.</li>
<li><a href="/en-us/dotnet/api/system.net.http.multipartcontent" class="no-loc" data-linktype="absolute-path">MultipartContent</a>: Provides a collection of HttpContent objects that get serialized using the <code>"multipart/*"</code> MIME type specification.</li>
<li><a href="/en-us/dotnet/api/system.net.http.multipartformdatacontent" class="no-loc" data-linktype="absolute-path">MultipartFormDataContent</a>: Provides a container for content encoded using <code>"multipart/form-data"</code> MIME type.</li>
<li><a href="/en-us/dotnet/api/system.net.http.readonlymemorycontent" class="no-loc" data-linktype="absolute-path">ReadOnlyMemoryContent</a>: Provides HTTP content based on a <a href="/en-us/dotnet/api/system.readonlymemory-1" class="no-loc" data-linktype="absolute-path">ReadOnlyMemory&lt;T&gt;</a>.</li>
<li><a href="/en-us/dotnet/api/system.net.http.streamcontent" class="no-loc" data-linktype="absolute-path">StreamContent</a>: Provides HTTP content based on a stream.</li>
<li><a href="/en-us/dotnet/api/system.net.http.stringcontent" class="no-loc" data-linktype="absolute-path">StringContent</a>: Provides HTTP content based on a string.</li>
</ul>
<p>The <code>HttpContent</code> class is also used to represent the response body of the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage" class="no-loc" data-linktype="absolute-path">HttpResponseMessage</a>, accessible on the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage.content#system-net-http-httpresponsemessage-content" class="no-loc" data-linktype="absolute-path">HttpResponseMessage.Content</a> property.</p>
<h3 id="http-get">HTTP Get</h3>
<p>A <code>GET</code> request shouldn't send a body and is used (as the method name indicates) to retrieve (or get) data from a resource. To make an HTTP <code>GET</code> request, given an <code>HttpClient</code> and a URI, use the <a href="/en-us/dotnet/api/system.net.http.httpclient.getasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetAsync</a> method:</p>
<pre><code class="lang-csharp">static async Task GetAsync(HttpClient httpClient)
{
    using HttpResponseMessage response = await httpClient.GetAsync("todos/3");
    
    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();
    
    var jsonResponse = await response.Content.ReadAsStringAsync();
    Console.WriteLine($"{jsonResponse}\n");

    // Expected output:
    //   GET https://jsonplaceholder.typicode.com/todos/3 HTTP/1.1
    //   {
    //     "userId": 1,
    //     "id": 3,
    //     "title": "fugiat veniam minus",
    //     "completed": false
    //   }
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Makes a <code>GET</code> request to <code>"https://jsonplaceholder.typicode.com/todos/3"</code>.</li>
<li>Ensures that the response is successful.</li>
<li>Writes the request details to the console.</li>
<li>Reads the response body as a string.</li>
<li>Writes the JSON response body to the console.</li>
</ul>
<p>The <code>WriteRequestToConsole</code> is a custom extension method that isn't part of the framework, but if you're curious about how it's implemented, consider the following C# code:</p>
<pre><code class="lang-csharp">static class HttpResponseMessageExtensions
{
    internal static void WriteRequestToConsole(this HttpResponseMessage response)
    {
        if (response is null)
        {
            return;
        }

        var request = response.RequestMessage;
        Console.Write($"{request?.Method} ");
        Console.Write($"{request?.RequestUri} ");
        Console.WriteLine($"HTTP/{request?.Version}");        
    }
}
</code></pre>
<p>This functionality is used to write the request details to the console in the following form:</p>
<p><code>&lt;HTTP Request Method&gt; &lt;Request URI&gt; &lt;HTTP/Version&gt;</code></p>
<p>As an example, the <code>GET</code> request to <code>https://jsonplaceholder.typicode.com/todos/3</code> outputs the following message:</p>
<pre><code class="lang-Output">GET https://jsonplaceholder.typicode.com/todos/3 HTTP/1.1
</code></pre>
<h4 id="http-get-from-json">HTTP Get from JSON</h4>
<p>The <a href="https://jsonplaceholder.typicode.com/todos" data-linktype="external">https://jsonplaceholder.typicode.com/todos</a> endpoint returns a JSON array of "todo" objects. Their JSON structure resembles the following:</p>
<pre><code class="lang-json">[
  {
    "userId": 1,
    "id": 1,
    "title": "example title",
    "completed": false
  },
  {
    "userId": 1,
    "id": 2,
    "title": "another example title",
    "completed": true
  },
]
</code></pre>
<p>The C# <code>Todo</code> object is defined as follows:</p>
<pre><code class="lang-csharp">public record class Todo(
    int? UserId = null,
    int? Id = null,
    string? Title = null,
    bool? Completed = null);
</code></pre>
<p>It's a <code>record class</code> type, with optional <code>Id</code>, <code>Title</code>, <code>Completed</code>, and <code>UserId</code> properties. For more information on the <code>record</code> type, see <a href="../../../csharp/fundamentals/types/records" data-linktype="relative-path">Introduction to record types in C#</a>. To automatically deserialize <code>GET</code> requests into strongly-typed C# object, use the <a href="/en-us/dotnet/api/system.net.http.json.httpclientjsonextensions.getfromjsonasync" class="no-loc" data-linktype="absolute-path">GetFromJsonAsync</a> extension method that's part of the <a href="https://www.nuget.org/packages/System.Net.Http.Json" data-linktype="external">System.Net.Http.Json</a> NuGet package.</p>
<pre><code class="lang-csharp">static async Task GetFromJsonAsync(HttpClient httpClient)
{
    var todos = await httpClient.GetFromJsonAsync&lt;List&lt;Todo&gt;&gt;(
        "todos?userId=1&amp;completed=false");

    Console.WriteLine("GET https://jsonplaceholder.typicode.com/todos?userId=1&amp;completed=false HTTP/1.1");
    todos?.ForEach(Console.WriteLine);
    Console.WriteLine();

    // Expected output:
    //   GET https://jsonplaceholder.typicode.com/todos?userId=1&amp;completed=false HTTP/1.1
    //   Todo { UserId = 1, Id = 1, Title = delectus aut autem, Completed = False }
    //   Todo { UserId = 1, Id = 2, Title = quis ut nam facilis et officia qui, Completed = False }
    //   Todo { UserId = 1, Id = 3, Title = fugiat veniam minus, Completed = False }
    //   Todo { UserId = 1, Id = 5, Title = laboriosam mollitia et enim quasi adipisci quia provident illum, Completed = False }
    //   Todo { UserId = 1, Id = 6, Title = qui ullam ratione quibusdam voluptatem quia omnis, Completed = False }
    //   Todo { UserId = 1, Id = 7, Title = illo expedita consequatur quia in, Completed = False }
    //   Todo { UserId = 1, Id = 9, Title = molestiae perspiciatis ipsa, Completed = False }
    //   Todo { UserId = 1, Id = 13, Title = et doloremque nulla, Completed = False }
    //   Todo { UserId = 1, Id = 18, Title = dolorum est consequatur ea mollitia in culpa, Completed = False }
}
</code></pre>
<p>In the preceding code:</p>
<ul>
<li>A <code>GET</code> request is made to <code>"https://jsonplaceholder.typicode.com/todos?userId=1&amp;completed=false"</code>.
<ul>
<li>The query string represents the filtering criteria for the request.</li>
</ul>
</li>
<li>The response is automatically deserialized into a <code>List&lt;Todo&gt;</code> when successful.</li>
<li>The request details are written to the console, along with each <code>Todo</code> object.</li>
</ul>
<h3 id="http-post">HTTP Post</h3>
<p>A <code>POST</code> request sends data to the server for processing. The <code>Content-Type</code> header of the request signifies what <a href="/en-us/dotnet/api/system.net.mime.contenttype" data-linktype="absolute-path">MIME type</a> the body is sending. To make an HTTP <code>POST</code> request, given an <code>HttpClient</code> and a <a href="/en-us/dotnet/api/system.uri" class="no-loc" data-linktype="absolute-path">Uri</a>, use the <a href="/en-us/dotnet/api/system.net.http.httpclient.postasync" class="no-loc" data-linktype="absolute-path">HttpClient.PostAsync</a> method:</p>
<pre><code class="lang-csharp">static async Task PostAsync(HttpClient httpClient)
{
    using StringContent jsonContent = new(
        JsonSerializer.Serialize(new
        {
            userId = 77,
            id = 1,
            title = "write code sample",
            completed = false
        }),
        Encoding.UTF8,
        "application/json");

    using HttpResponseMessage response = await httpClient.PostAsync(
        "todos",
        jsonContent);

    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();
    
    var jsonResponse = await response.Content.ReadAsStringAsync();
    Console.WriteLine($"{jsonResponse}\n");

    // Expected output:
    //   POST https://jsonplaceholder.typicode.com/todos HTTP/1.1
    //   {
    //     "userId": 77,
    //     "id": 201,
    //     "title": "write code sample",
    //     "completed": false
    //   }
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Prepares a <a href="/en-us/dotnet/api/system.net.http.stringcontent" class="no-loc" data-linktype="absolute-path">StringContent</a> instance with the JSON body of the request (MIME type of <code>"application/json"</code>).</li>
<li>Makes a <code>POST</code> request to <code>"https://jsonplaceholder.typicode.com/todos"</code>.</li>
<li>Ensures that the response is successful, and writes the request details to the console.</li>
<li>Writes the response body as a string to the console.</li>
</ul>
<h4 id="http-post-as-json">HTTP Post as JSON</h4>
<p>To automatically serialize <code>POST</code> request arguments and deserialize responses into strongly-typed C# objects, use the <a href="/en-us/dotnet/api/system.net.http.json.httpclientjsonextensions.postasjsonasync" class="no-loc" data-linktype="absolute-path">PostAsJsonAsync</a> extension method that's part of the <a href="https://www.nuget.org/packages/System.Net.Http.Json" data-linktype="external">System.Net.Http.Json</a> NuGet package.</p>
<pre><code class="lang-csharp">static async Task PostAsJsonAsync(HttpClient httpClient)
{
    using HttpResponseMessage response = await httpClient.PostAsJsonAsync(
        "todos", 
        new Todo(UserId: 9, Id: 99, Title: "Show extensions", Completed: false));

    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();

    var todo = await response.Content.ReadFromJsonAsync&lt;Todo&gt;();
    Console.WriteLine($"{todo}\n");

    // Expected output:
    //   POST https://jsonplaceholder.typicode.com/todos HTTP/1.1
    //   Todo { UserId = 9, Id = 201, Title = Show extensions, Completed = False }
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Serializes the <code>Todo</code> instance as JSON, and makes a <code>POST</code> request to <code>"https://jsonplaceholder.typicode.com/todos"</code>.</li>
<li>Ensures that the response is successful, and writes the request details to the console.</li>
<li>Deserializes the response body into a <code>Todo</code> instance, and writes the <code>Todo</code> to the console.</li>
</ul>
<h3 id="http-put">HTTP Put</h3>
<p>The <code>PUT</code> request method either replaces an existing resource or creates a new one using request body payload. To make an HTTP <code>PUT</code> request, given an <code>HttpClient</code> and a URI, use the <a href="/en-us/dotnet/api/system.net.http.httpclient.putasync" class="no-loc" data-linktype="absolute-path">HttpClient.PutAsync</a> method:</p>
<pre><code class="lang-csharp">static async Task PutAsync(HttpClient httpClient)
{
    using StringContent jsonContent = new(
        JsonSerializer.Serialize(new 
        {
            userId = 1,
            id = 1,
            title = "foo bar",
            completed = false
        }),
        Encoding.UTF8,
        "application/json");

    using HttpResponseMessage response = await httpClient.PutAsync(
        "todos/1",
        jsonContent);

    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();
    
    var jsonResponse = await response.Content.ReadAsStringAsync();
    Console.WriteLine($"{jsonResponse}\n");

    // Expected output:
    //   PUT https://jsonplaceholder.typicode.com/todos/1 HTTP/1.1
    //   {
    //     "userId": 1,
    //     "id": 1,
    //     "title": "foo bar",
    //     "completed": false
    //   }
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Prepares a <a href="/en-us/dotnet/api/system.net.http.stringcontent" class="no-loc" data-linktype="absolute-path">StringContent</a> instance with the JSON body of the request (MIME type of <code>"application/json"</code>).</li>
<li>Makes a <code>PUT</code> request to <code>"https://jsonplaceholder.typicode.com/todos/1"</code>.</li>
<li>Ensures that the response is successful, and writes the request details and JSON response body to the console.</li>
</ul>
<h4 id="http-put-as-json">HTTP Put as JSON</h4>
<p>To automatically serialize <code>PUT</code> request arguments and deserialize responses into strongly typed C# objects, use the <a href="/en-us/dotnet/api/system.net.http.json.httpclientjsonextensions.putasjsonasync" class="no-loc" data-linktype="absolute-path">PutAsJsonAsync</a> extension method that's part of the <a href="https://www.nuget.org/packages/System.Net.Http.Json" data-linktype="external">System.Net.Http.Json</a> NuGet package.</p>
<pre><code class="lang-csharp">static async Task PutAsJsonAsync(HttpClient httpClient)
{
    using HttpResponseMessage response = await httpClient.PutAsJsonAsync(
        "todos/5",
        new Todo(Title: "partially update todo", Completed: true));

    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();

    var todo = await response.Content.ReadFromJsonAsync&lt;Todo&gt;();
    Console.WriteLine($"{todo}\n");

    // Expected output:
    //   PUT https://jsonplaceholder.typicode.com/todos/5 HTTP/1.1
    //   Todo { UserId = , Id = 5, Title = partially update todo, Completed = True }
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Serializes the <code>Todo</code> instance as JSON, and makes a <code>PUT</code> request to <code>"https://jsonplaceholder.typicode.com/todos/5"</code>.</li>
<li>Ensures that the response is successful, and writes the request details to the console.</li>
<li>Deserializes the response body into a <code>Todo</code> instance, and writes the <code>Todo</code> to the console.</li>
</ul>
<h3 id="http-patch">HTTP Patch</h3>
<p>The <code>PATCH</code> request is a partial update to an existing resource. It doesn't create a new resource, and it's not intended to replace an existing resource. Instead, it updates a resource only partially. To make an HTTP <code>PATCH</code> request, given an <code>HttpClient</code> and a URI, use the <a href="/en-us/dotnet/api/system.net.http.httpclient.patchasync" class="no-loc" data-linktype="absolute-path">HttpClient.PatchAsync</a> method:</p>
<pre><code class="lang-csharp">static async Task PatchAsync(HttpClient httpClient)
{
    using StringContent jsonContent = new(
        JsonSerializer.Serialize(new
        {
            completed = true
        }),
        Encoding.UTF8,
        "application/json");

    using HttpResponseMessage response = await httpClient.PatchAsync(
        "todos/1",
        jsonContent);

    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();

    var jsonResponse = await response.Content.ReadAsStringAsync();
    Console.WriteLine($"{jsonResponse}\n");

    // Expected output
    //   PATCH https://jsonplaceholder.typicode.com/todos/1 HTTP/1.1
    //   {
    //     "userId": 1,
    //     "id": 1,
    //     "title": "delectus aut autem",
    //     "completed": true
    //   }
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Prepares a <a href="/en-us/dotnet/api/system.net.http.stringcontent" class="no-loc" data-linktype="absolute-path">StringContent</a> instance with the JSON body of the request (MIME type of <code>"application/json"</code>).</li>
<li>Makes a <code>PATCH</code> request to <code>"https://jsonplaceholder.typicode.com/todos/1"</code>.</li>
<li>Ensures that the response is successful, and writes the request details and JSON response body to the console.</li>
</ul>
<p>No extension methods exist for <code>PATCH</code> requests in the <code>System.Net.Http.Json</code> NuGet package.</p>
<h3 id="http-delete">HTTP Delete</h3>
<p>A <code>DELETE</code> request deletes an existing resource. A <code>DELETE</code> request is <em>idempotent</em> but not <em>safe</em>, meaning multiple <code>DELETE</code> requests to the same resources yield the same result, but the request affects the state of the resource. To make an HTTP <code>DELETE</code> request, given an <code>HttpClient</code> and a URI, use the <a href="/en-us/dotnet/api/system.net.http.httpclient.deleteasync" class="no-loc" data-linktype="absolute-path">HttpClient.DeleteAsync</a> method:</p>
<pre><code class="lang-csharp">static async Task DeleteAsync(HttpClient httpClient)
{
    using HttpResponseMessage response = await httpClient.DeleteAsync("todos/1");
    
    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();

    var jsonResponse = await response.Content.ReadAsStringAsync();
    Console.WriteLine($"{jsonResponse}\n");

    // Expected output
    //   DELETE https://jsonplaceholder.typicode.com/todos/1 HTTP/1.1
    //   {}
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Makes a <code>DELETE</code> request to <code>"https://jsonplaceholder.typicode.com/todos/1"</code>.</li>
<li>Ensures that the response is successful, and writes the request details to the console.</li>
</ul>
<div class="TIP">
<p>Tip</p>
<p>The response to a <code>DELETE</code> request (just like a <code>PUT</code> request) may or may not include a body.</p>
</div>
<h3 id="http-head">HTTP Head</h3>
<p>The <code>HEAD</code> request is similar to a <code>GET</code> request. Instead of returning the resource, it only returns the headers associated with the resource. A response to the <code>HEAD</code> request doesn't return a body. To make an HTTP <code>HEAD</code> request, given an <code>HttpClient</code> and a URI, use the <a href="/en-us/dotnet/api/system.net.http.httpclient.sendasync" class="no-loc" data-linktype="absolute-path">HttpClient.SendAsync</a> method with the <a href="/en-us/dotnet/api/system.net.http.httpmethod" class="no-loc" data-linktype="absolute-path">HttpMethod</a> set to <code>HttpMethod.Head</code>:</p>
<pre><code class="lang-csharp">static async Task HeadAsync(HttpClient httpClient)
{
    using HttpRequestMessage request = new(
        HttpMethod.Head, 
        "https://www.example.com");

    using HttpResponseMessage response = await httpClient.SendAsync(request);

    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();

    foreach (var header in response.Headers)
    {
        Console.WriteLine($"{header.Key}: {string.Join(", ", header.Value)}");
    }
    Console.WriteLine();

    // Expected output:
    //   HEAD https://www.example.com/ HTTP/1.1
    //   Accept-Ranges: bytes
    //   Age: 550374
    //   Cache-Control: max-age=604800
    //   Date: Wed, 10 Aug 2022 17:24:55 GMT
    //   ETag: "3147526947"
    //   Server: ECS, (cha / 80E2)
    //   X-Cache: HIT
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Makes a <code>HEAD</code> request to <code>"https://www.example.com/"</code>.</li>
<li>Ensures that the response is successful, and writes the request details to the console.</li>
<li>Iterates over all of the response headers, writing each one to the console.</li>
</ul>
<h3 id="http-options">HTTP Options</h3>
<p>The <code>OPTIONS</code> request is used to identify which HTTP methods a server or endpoint supports. To make an HTTP <code>OPTIONS</code> request, given an <code>HttpClient</code> and a URI, use the <a href="/en-us/dotnet/api/system.net.http.httpclient.sendasync" class="no-loc" data-linktype="absolute-path">HttpClient.SendAsync</a> method with the <a href="/en-us/dotnet/api/system.net.http.httpmethod" class="no-loc" data-linktype="absolute-path">HttpMethod</a> set to <code>HttpMethod.Options</code>:</p>
<pre><code class="lang-csharp">static async Task OptionsAsync(HttpClient httpClient)
{
    using HttpRequestMessage request = new(
        HttpMethod.Options, 
        "https://www.example.com");

    using HttpResponseMessage response = await httpClient.SendAsync(request);

    response.EnsureSuccessStatusCode()
        .WriteRequestToConsole();

    foreach (var header in response.Content.Headers)
    {
        Console.WriteLine($"{header.Key}: {string.Join(", ", header.Value)}");
    }
    Console.WriteLine();

    // Expected output
    //   OPTIONS https://www.example.com/ HTTP/1.1
    //   Allow: OPTIONS, GET, HEAD, POST
    //   Content-Type: text/html; charset=utf-8
    //   Expires: Wed, 17 Aug 2022 17:28:42 GMT
    //   Content-Length: 0
}
</code></pre>
<p>The preceding code:</p>
<ul>
<li>Sends an <code>OPTIONS</code> HTTP request to <code>"https://www.example.com/"</code>.</li>
<li>Ensures that the response is successful, and writes the request details to the console.</li>
<li>Iterates over all of the response content headers, writing each one to the console.</li>
</ul>
<h3 id="http-trace">HTTP Trace</h3>
<p>The <code>TRACE</code> request can be useful for debugging as it provides application-level loop-back of the request message. To make an HTTP <code>TRACE</code> request, create an <a href="/en-us/dotnet/api/system.net.http.httprequestmessage" class="no-loc" data-linktype="absolute-path">HttpRequestMessage</a> using the <code>HttpMethod.Trace</code>:</p>
<pre><code class="lang-csharp">using HttpRequestMessage request = new(
    HttpMethod.Trace, 
    "{ValidRequestUri}");
</code></pre>
<div class="CAUTION">
<p>Caution</p>
<p>The <code>TRACE</code> HTTP method is not supported by all HTTP servers. It can expose a security vulnerability if used unwisely. For more information, see <a href="https://owasp.org/www-community/attacks/Cross_Site_Tracing" data-linktype="external">Open Web Application Security Project (OWASP): Cross Site Tracing</a>.</p>
</div>
<h2 id="handle-an-http-response">Handle an HTTP response</h2>
<p>Whenever you're handling an HTTP response, you interact with the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage" class="no-loc" data-linktype="absolute-path">HttpResponseMessage</a> type. Several members are used when evaluating the validity of a response. The HTTP status code is available via the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage.statuscode#system-net-http-httpresponsemessage-statuscode" class="no-loc" data-linktype="absolute-path">HttpResponseMessage.StatusCode</a> property. Imagine that you've sent a request given a client instance:</p>
<pre><code class="lang-csharp">using HttpResponseMessage response = await httpClient.SendAsync(request);
</code></pre>
<p>To ensure that the <code>response</code> is <code>OK</code> (HTTP status code 200), you can evaluate it as shown in the following example:</p>
<pre><code class="lang-csharp">if (response is { StatusCode: HttpStatusCode.OK })
{
    // Omitted for brevity...
}
</code></pre>
<p>There are other HTTP status codes that represent a successful response, such as <code>CREATED</code> (HTTP status code 201), <code>ACCEPTED</code> (HTTP status code 202), <code>NO CONTENT</code> (HTTP status code 204), and <code>RESET CONTENT</code> (HTTP status code 205). You can use the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage.issuccessstatuscode#system-net-http-httpresponsemessage-issuccessstatuscode" class="no-loc" data-linktype="absolute-path">HttpResponseMessage.IsSuccessStatusCode</a> property to evaluate these codes as well, which ensures that the response status code is within the range 200-299:</p>
<pre><code class="lang-csharp">if (response.IsSuccessStatusCode)
{
    // Omitted for brevity...
}
</code></pre>
<p>If you need to have the framework throw the <a href="/en-us/dotnet/api/system.net.http.httprequestexception" class="no-loc" data-linktype="absolute-path">HttpRequestException</a>, you can call the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage.ensuresuccessstatuscode#system-net-http-httpresponsemessage-ensuresuccessstatuscode" class="no-loc" data-linktype="absolute-path">HttpResponseMessage.EnsureSuccessStatusCode()</a> method:</p>
<pre><code class="lang-csharp">response.EnsureSuccessStatusCode();
</code></pre>
<p>This code throws an <code>HttpRequestException</code> if the response status code isn't within the 200-299 range.</p>
<h3 id="http-valid-content-responses">HTTP valid content responses</h3>
<p>With a valid response, you can access the response body using the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage.content#system-net-http-httpresponsemessage-content" class="no-loc" data-linktype="absolute-path">Content</a> property. The body is available as an <a href="/en-us/dotnet/api/system.net.http.httpcontent" class="no-loc" data-linktype="absolute-path">HttpContent</a> instance, which you can use to access the body as a stream, byte array, or string:</p>
<pre><code class="lang-csharp">await using Stream responseStream =
    await response.Content.ReadAsStreamAsync();
</code></pre>
<p>In the preceding code, the <code>responseStream</code> can be used to read the response body.</p>
<pre><code class="lang-csharp">byte[] responseByteArray = await response.Content.ReadAsByteArrayAsync();
</code></pre>
<p>In the preceding code, the <code>responseByteArray</code> can be used to read the response body.</p>
<pre><code class="lang-csharp">string responseString = await response.Content.ReadAsStringAsync();
</code></pre>
<p>In the preceding code, the <code>responseString</code> can be used to read the response body.</p>
<p>Finally, when you know an HTTP endpoint returns JSON, you can deserialize the response body into any valid C# object by using the <a href="https://www.nuget.org/packages/System.Net.Http.Json" data-linktype="external">System.Net.Http.Json</a> NuGet package:</p>
<pre><code class="lang-csharp">T? result = await response.Content.ReadFromJsonAsync&lt;T&gt;();
</code></pre>
<p>In the preceding code, <code>result</code> is the response body deserialized as the type <code>T</code>.</p>
<h2 id="http-error-handling">HTTP error handling</h2>
<p>When an HTTP request fails, the <a href="/en-us/dotnet/api/system.net.http.httprequestexception" class="no-loc" data-linktype="absolute-path">HttpRequestException</a> is thrown. Catching that exception alone may not be sufficient, as there are other potential exceptions thrown that you might want to consider handling. For example, the calling code may have used a cancellation token that was canceled before the request was completed. In this scenario, you'd catch the <a href="/en-us/dotnet/api/system.threading.tasks.taskcanceledexception" class="no-loc" data-linktype="absolute-path">TaskCanceledException</a>:</p>
<pre><code class="lang-csharp">using var cts = new CancellationTokenSource();
try
{
    // Assuming:
    //   httpClient.Timeout = TimeSpan.FromSeconds(10)

    using var response = await httpClient.GetAsync(
        "http://localhost:5001/sleepFor?seconds=100", cts.Token);
}
catch (OperationCanceledException ex) when (cts.IsCancellationRequested)
{
    // When the token has been canceled, it is not a timeout.
    Console.WriteLine($"Canceled: {ex.Message}");
}
</code></pre>
<p>Likewise, when making an HTTP request, if the server doesn't respond before the <a href="/en-us/dotnet/api/system.net.http.httpclient.timeout#system-net-http-httpclient-timeout" class="no-loc" data-linktype="absolute-path">HttpClient.Timeout</a> is exceeded the same exception is thrown. However, in this scenario, you can distinguish that the timeout occurred by evaluating the <a href="/en-us/dotnet/api/system.exception.innerexception#system-exception-innerexception" class="no-loc" data-linktype="absolute-path">Exception.InnerException</a> when catching the <a href="/en-us/dotnet/api/system.threading.tasks.taskcanceledexception" class="no-loc" data-linktype="absolute-path">TaskCanceledException</a>:</p>
<pre><code class="lang-csharp">try
{
    // Assuming:
    //   httpClient.Timeout = TimeSpan.FromSeconds(10)

    using var response = await httpClient.GetAsync(
        "http://localhost:5001/sleepFor?seconds=100");
}
catch (OperationCanceledException ex) when (ex.InnerException is TimeoutException tex)
{
    Console.WriteLine($"Timed out: {ex.Message}, {tex.Message}");
}
</code></pre>
<p>In the preceding code, when the inner exception is a <a href="/en-us/dotnet/api/system.timeoutexception" class="no-loc" data-linktype="absolute-path">TimeoutException</a> the timeout occurred, and the request wasn't canceled by the cancellation token.</p>
<p>To evaluate the HTTP status code when catching an <a href="/en-us/dotnet/api/system.net.http.httprequestexception" class="no-loc" data-linktype="absolute-path">HttpRequestException</a>, you can evaluate the <a href="/en-us/dotnet/api/system.net.http.httprequestexception.statuscode" class="no-loc" data-linktype="absolute-path">HttpRequestException.StatusCode</a> property:</p>
<pre><code class="lang-csharp">try
{
    // Assuming:
    //   httpClient.Timeout = TimeSpan.FromSeconds(10)

    using var response = await httpClient.GetAsync(
        "http://localhost:5001/doesNotExist");

    response.EnsureSuccessStatusCode();
}
catch (HttpRequestException ex) when (ex is { StatusCode: HttpStatusCode.NotFound })
{
    // Handle 404
    Console.WriteLine($"Not found: {ex.Message}");
}
</code></pre>
<p>In the preceding code, the <a href="/en-us/dotnet/api/system.net.http.httpresponsemessage.ensuresuccessstatuscode#system-net-http-httpresponsemessage-ensuresuccessstatuscode" class="no-loc" data-linktype="absolute-path">EnsureSuccessStatusCode()</a> method is called to throw an exception if the response isn't successful. The <a href="/en-us/dotnet/api/system.net.http.httprequestexception.statuscode" class="no-loc" data-linktype="absolute-path">HttpRequestException.StatusCode</a> property is then evaluated to determine if the response was a <code>404</code> (HTTP status code 404). There are several helper methods on <code>HttpClient</code> that implicitly call <code>EnsureSuccessStatusCode</code> on your behalf, consider the following APIs:</p>
<ul>
<li><a href="/en-us/dotnet/api/system.net.http.httpclient.getbytearrayasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetByteArrayAsync</a></li>
<li><a href="/en-us/dotnet/api/system.net.http.httpclient.getstreamasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetStreamAsync</a></li>
<li><a href="/en-us/dotnet/api/system.net.http.httpclient.getstringasync" class="no-loc" data-linktype="absolute-path">HttpClient.GetStringAsync</a></li>
</ul>
<div class="TIP">
<p>Tip</p>
<p>All <code>HttpClient</code> methods used to make HTTP requests that don't return an <code>HttpResponseMessage</code> implicitly call <code>EnsureSuccessStatusCode</code> on your behalf.</p>
</div>
<p>When calling these methods, you can handle the <code>HttpRequestException</code> and evaluate the <a href="/en-us/dotnet/api/system.net.http.httprequestexception.statuscode" class="no-loc" data-linktype="absolute-path">HttpRequestException.StatusCode</a> property to determine the HTTP status code of the response:</p>
<pre><code class="lang-csharp">try
{
    // These extension methods will throw HttpRequestException
    // with StatusCode set when the HTTP request status code isn't 2xx:
    //
    //   GetByteArrayAsync
    //   GetStreamAsync
    //   GetStringAsync

    using var stream = await httpClient.GetStreamAsync(
        "https://localhost:5001/doesNotExists");
}
catch (HttpRequestException ex) when (ex is { StatusCode: HttpStatusCode.NotFound })
{
    // Handle 404
    Console.WriteLine($"Not found: {ex.Message}");
}
</code></pre>
<p>There might be scenarios in which you need to throw the <a href="/en-us/dotnet/api/system.net.http.httprequestexception" class="no-loc" data-linktype="absolute-path">HttpRequestException</a> in your code. The <a href="/en-us/dotnet/api/system.net.http.httprequestexception.-ctor#system-net-http-httprequestexception-ctor" class="no-loc" data-linktype="absolute-path">HttpRequestException()</a> constructor is public, and you can use it to throw an exception with a custom message:</p>
<pre><code class="lang-csharp">try
{
    using var response = await httpClient.GetAsync(
        "https://localhost:5001/doesNotExists");

    // Throw for anything higher than 400.
    if (response is { StatusCode: &gt;= HttpStatusCode.BadRequest })
    {
        throw new HttpRequestException(
            "Something went wrong", inner: null, response.StatusCode);
    }
}
catch (HttpRequestException ex) when (ex is { StatusCode: HttpStatusCode.NotFound })
{
    Console.WriteLine($"Not found: {ex.Message}");
}
</code></pre>
<h2 id="http-proxy">HTTP proxy</h2>
<p>An HTTP proxy can be configured in one of two ways. A default is specified on the <a href="/en-us/dotnet/api/system.net.http.httpclient.defaultproxy#system-net-http-httpclient-defaultproxy" class="no-loc" data-linktype="absolute-path">HttpClient.DefaultProxy</a> property. Alternatively, you can specify a proxy on the <a href="/en-us/dotnet/api/system.net.http.httpclienthandler.proxy#system-net-http-httpclienthandler-proxy" class="no-loc" data-linktype="absolute-path">HttpClientHandler.Proxy</a> property.</p>
<h3 id="global-default-proxy">Global default proxy</h3>
<p>The <code>HttpClient.DefaultProxy</code> is a static property that determines the default proxy that all <code>HttpClient</code> instances use if no proxy is set explicitly in the <a href="/en-us/dotnet/api/system.net.http.httpclienthandler" class="no-loc" data-linktype="absolute-path">HttpClientHandler</a> passed through its constructor.</p>
<p>The default instance returned by this property initializes following a different set of rules depending on your platform:</p>
<ul>
<li><strong>For Windows:</strong> Reads proxy configuration from environment variables or, if those aren't defined, from the user's proxy settings.</li>
<li><strong>For macOS:</strong> Reads proxy configuration from environment variables or, if those aren't defined, from the system's proxy settings.</li>
<li><strong>For Linux:</strong> Reads proxy configuration from environment variables or, in case those aren't defined, this property initializes a non-configured instance that bypasses all addresses.</li>
</ul>
<p>The environment variables used for <code>DefaultProxy</code> initialization on Windows and Unix-based platforms are:</p>
<ul>
<li><code>HTTP_PROXY</code>: the proxy server used on HTTP requests.</li>
<li><code>HTTPS_PROXY</code>: the proxy server used on HTTPS requests.</li>
<li><code>ALL_PROXY</code>: the proxy server used on HTTP and/or HTTPS requests in case <code>HTTP_PROXY</code> and/or <code>HTTPS_PROXY</code> aren't defined.</li>
<li><code>NO_PROXY</code>: a comma-separated list of hostnames that should be excluded from proxying. Asterisks aren't supported for wildcards; use a leading dot in case you want to match a subdomain. Examples: <code>NO_PROXY=.example.com</code> (with leading dot) will match <code>www.example.com</code>, but won't match <code>example.com</code>. <code>NO_PROXY=example.com</code> (without leading dot) won't match <code>www.example.com</code>. This behavior might be revisited in the future to match other ecosystems better.</li>
</ul>
<p>On systems where environment variables are case-sensitive, the variable names may be all lowercase or all uppercase. The lowercase names are checked first.</p>
<p>The proxy server may be a hostname or IP address, optionally followed by a colon and port number, or it may be an <code>http</code> URL, optionally including a username and password for proxy authentication. The URL must be start with <code>http</code>, not <code>https</code>, and can't include any text after the hostname, IP, or port.</p>
<h3 id="proxy-per-client">Proxy per client</h3>
<p>The <a href="/en-us/dotnet/api/system.net.http.httpclienthandler.proxy#system-net-http-httpclienthandler-proxy" class="no-loc" data-linktype="absolute-path">HttpClientHandler.Proxy</a> property identifies the <a href="/en-us/dotnet/api/system.net.webproxy" class="no-loc" data-linktype="absolute-path">WebProxy</a> object to use to process requests to Internet resources. To specify that no proxy should be used, set the <code>Proxy</code> property to the proxy instance returned by the <a href="/en-us/dotnet/api/system.net.globalproxyselection.getemptywebproxy#system-net-globalproxyselection-getemptywebproxy" class="no-loc" data-linktype="absolute-path">GlobalProxySelection.GetEmptyWebProxy()</a> method.</p>
<p>The local computer or application config file may specify that a default proxy is used. If the Proxy property is specified, then the proxy settings from the Proxy property override the local computer or application config file and the handler uses the proxy settings specified. If no proxy is specified in a config file and the Proxy property is unspecified, the handler uses the proxy settings inherited from the local computer. If there are no proxy settings, the request is sent directly to the server.</p>
<p>The <a href="/en-us/dotnet/api/system.net.http.httpclienthandler" class="no-loc" data-linktype="absolute-path">HttpClientHandler</a> class parses a proxy bypass list with wildcard characters inherited from local computer settings. For example, the <code>HttpClientHandler</code> class parses a bypass list of <code>"nt*"</code> from browsers as a regular expression of <code>"nt.*"</code>. So a URL of <code>http://nt.com</code> would bypass the proxy using the <code>HttpClientHandler</code> class.</p>
<p>The <code>HttpClientHandler</code> class supports local proxy bypass. The class considers a destination to be local if any of the following conditions are met:</p>
<ol>
<li>The destination contains a flat name (no dots in the URL).</li>
<li>The destination contains a loopback address (<a href="/en-us/dotnet/api/system.net.ipaddress.loopback#system-net-ipaddress-loopback" class="no-loc" data-linktype="absolute-path">Loopback</a> or <a href="/en-us/dotnet/api/system.net.ipaddress.ipv6loopback#system-net-ipaddress-ipv6loopback" class="no-loc" data-linktype="absolute-path">IPv6Loopback</a>) or the destination contains an <a href="/en-us/dotnet/api/system.net.ipaddress" class="no-loc" data-linktype="absolute-path">IPAddress</a> assigned to the local computer.</li>
<li>The domain suffix of the destination matches the local computer's domain suffix (<a href="/en-us/dotnet/api/system.net.networkinformation.ipglobalproperties.domainname#system-net-networkinformation-ipglobalproperties-domainname" class="no-loc" data-linktype="absolute-path">DomainName</a>).</li>
</ol>
<p>For more information about configuring a proxy, see:</p>
<ul>
<li><a href="/en-us/dotnet/api/system.net.webproxy.address#system-net-webproxy-address" class="no-loc" data-linktype="absolute-path">WebProxy.Address</a></li>
<li><a href="/en-us/dotnet/api/system.net.webproxy.bypassproxyonlocal#system-net-webproxy-bypassproxyonlocal" class="no-loc" data-linktype="absolute-path">WebProxy.BypassProxyOnLocal</a></li>
<li><a href="/en-us/dotnet/api/system.net.webproxy.bypassarraylist#system-net-webproxy-bypassarraylist" class="no-loc" data-linktype="absolute-path">WebProxy.BypassArrayList</a></li>
</ul>
<h2 id="see-also">See also</h2>
<ul>
<li><a href="http-overview" data-linktype="relative-path">HTTP support in .NET</a></li>
<li><a href="httpclient-guidelines" data-linktype="relative-path">Guidelines for using HttpClient</a></li>
<li><a href="../../../core/extensions/httpclient-factory" data-linktype="relative-path">HTTP client factory with .NET</a></li>
<li><a href="../../../core/extensions/httpclient-http3" data-linktype="relative-path">Use HTTP/3 with HttpClient</a></li>
<li><a href="/en-us/aspnet/core/web-api/http-repl" data-linktype="absolute-path">Test web APIs with the HttpRepl</a></li>
</ul>
</div><div id="ms--inline-notifications" class="margin-block-xs" data-bi-name="inline-notification"></div><div id="assertive-live-region" role="alert" aria-live="assertive" class="visually-hidden" aria-relevant="additions" aria-atomic="true"></div>
							<div id="polite-live-region" role="status" aria-live="polite" class="visually-hidden" aria-relevant="additions" aria-atomic="true"></div>
							<!-- </content> -->

						</main><!-- recommendations section --><!-- end recommendations section -->

						<!-- feedback section --><section class="feedback-section position-relative margin-top-lg border border-radius padding-xxs" data-bi-name="open-source-feedback-section" data-open-source-feedback-section hidden>
	<div class="display-flex flex-direction-column flex-direction-row-tablet">
		<div class="width-450-tablet padding-inline-xs padding-inline-xs-tablet padding-top-xs padding-bottom-sm padding-top-xs-tablet background-color-body-medium">
			<div class="display-flex flex-direction-column">
				<div class="padding-bottom-xxs">
					<span class="icon margin-right-xxs" aria-hidden="true">
						<span class="docon docon-brand-github"></span>
					</span>
					<span class="font-weight-semibold"
						>Collaborate with us on GitHub</span>
				</div>
				<span class="line-height-normal">
					The source for this content can be found on GitHub, where you can also create and review issues and pull requests. For more information, see <a href="https://learn.microsoft.com/contribute/content/dotnet/dotnet-contribute">our contributor guide</a>.
				</span>
			</div>
		</div>
		<div class="display-flex gap-xs width-full-tablet flex-direction-column padding-xs justify-content-space-evenly">
			<div class="media"><div class="media-left">
					<div class="image image-36x36" hidden data-open-source-image-container>
						<img class="theme-display is-light" src="https://learn.microsoft.com/media/logos/logo_net.svg" aria-hidden="true" data-open-source-image-light/>
						<img class="theme-display is-dark is-high-contrast" src="https://learn.microsoft.com/media/logos/logo_net.svg" aria-hidden="true" data-open-source-image-dark/>
					</div>
					</div>
				
				<div class="media-content">
					<p class="font-size-xl font-weight-semibold margin-bottom-xxs" data-open-source-product-title>.NET</p>
					<div class="display-flex gap-xs flex-direction-column">
						<p class="line-height-normal" data-open-source-product-description></p>
						<div class="display-flex gap-xs flex-direction-column">
							<a href="" data-github-link>
								<span class="icon margin-right-xxs" aria-hidden="true">
									<span class="docon docon-bug"></span>
								</span>
								<span>Open a documentation issue</span>
							</a>
							<a href="https://aka.ms/feedback/report?space=61" class="display-block margin-top-auto font-size-md" data-feedback-product-url>
								<span class="icon margin-right-xxs" aria-hidden="true">
									<span class="docon docon-feedback"></span>
								</span>
								<span>Provide product feedback</span>
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section><!-- end feedback section -->

						<!-- feedback report section --><!-- end feedback report section --><aside
								id="ms--additional-resources-mobile"
								aria-label="Additional resources"
								class="display-none-desktop display-none-print"
							>
								<hr class="hr" hidden />
								<h2 id="ms--additional-resources-mobile-heading" class="title is-3" hidden>Additional resources</h2>
								<section id="right-rail-recommendations-mobile" data-bi-name="recommendations" hidden></section>
								<section id="right-rail-training-mobile" data-bi-name="learning-resources-card" hidden></section>
								<section id="right-rail-events-mobile" data-bi-name="events-card" hidden></section>
								<section id="right-rail-qna-mobile" data-bi-name="qna-link-card" hidden></section>
							</aside><div class="border-top is-visible-interactive has-default-focus margin-top-sm "><footer id="footer-interactive" data-bi-name="footer" class="footer-layout"><div class="display-flex gap-xs flex-wrap-wrap is-full-height padding-right-lg-desktop"><a
				data-mscc-ic="false"
				class="locale-selector-link button button-sm button-clear flex-shrink-0"
				href="#"
				data-bi-name="select-locale">
					<span class="icon" aria-hidden="true">
						<span class="docon docon-world"></span>
					</span>
					<span class="local-selector-link-text"></span></a><div class="ccpa-privacy-link" data-ccpa-privacy-link hidden>
<a
	href="https://aka.ms/yourcaliforniaprivacychoices"
	class="button button-sm button-clear flex-shrink-0"
	data-mscc-ic="false"
	data-bi-name="your-privacy-choices"
>
	<svg
		role="img"
		aria-label="California Consumer Privacy Act (CCPA) Opt-Out Icon"
		xmlns="http://www.w3.org/2000/svg"
		viewBox="0 0 30 14"
		xml:space="preserve"
		height="16"
		width="43"
		focusable="false"
	>
		<title>California Consumer Privacy Act (CCPA) Opt-Out Icon</title>
		<path d="M7.4 12.8h6.8l3.1-11.6H7.4C4.2 1.2 1.6 3.8 1.6 7s2.6 5.8 5.8 5.8z" style="fill-rule:evenodd;clip-rule:evenodd;fill:#fff"></path>
		<path d="M22.6 0H7.4c-3.9 0-7 3.1-7 7s3.1 7 7 7h15.2c3.9 0 7-3.1 7-7s-3.2-7-7-7zm-21 7c0-3.2 2.6-5.8 5.8-5.8h9.9l-3.1 11.6H7.4c-3.2 0-5.8-2.6-5.8-5.8z" style="fill-rule:evenodd;clip-rule:evenodd;fill:#06f"></path>
		<path d="M24.6 4c.2.2.2.6 0 .8L22.5 7l2.2 2.2c.2.2.2.6 0 .8-.2.2-.6.2-.8 0l-2.2-2.2-2.2 2.2c-.2.2-.6.2-.8 0-.2-.2-.2-.6 0-.8L20.8 7l-2.2-2.2c-.2-.2-.2-.6 0-.8.2-.2.6-.2.8 0l2.2 2.2L23.8 4c.2-.2.6-.2.8 0z" style="fill:#fff"></path>
		<path d="M12.7 4.1c.2.2.3.6.1.8L8.6 9.8c-.1.1-.2.2-.3.2-.2.1-.5.1-.7-.1L5.4 7.7c-.2-.2-.2-.6 0-.8.2-.2.6-.2.8 0L8 8.6l3.8-4.5c.2-.2.6-.2.9 0z" style="fill:#06f"></path>
	</svg>
	<span>Your Privacy Choices</span>
</a>

		</div>
		<div class="flex-shrink-0">
<div class="dropdown has-caret-up">
	<button class="dropdown-trigger button button-clear button-sm has-inner-focus theme-dropdown-trigger"
		aria-controls="theme-menu-interactive" aria-expanded="false" title="Theme" data-bi-name="theme">
		<span class="icon">
			<span class="docon docon-sun" aria-hidden="true"></span>
		</span>
		<span>Theme</span>
		<span class="icon expanded-indicator" aria-hidden="true">
			<span class="docon docon-chevron-down-light"></span>
		</span>
	</button>
	<div class="dropdown-menu" id="theme-menu-interactive" role="menu">
		<ul class="theme-selector padding-xxs" role="none">
			<li class="theme display-block" role="menuitem">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="light">
					<span class="theme-light margin-right-xxs">
						<span
							class="theme-selector-icon border display-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span>Light</span>
				</button>
			</li>
			<li class="theme display-block" role="menuitem">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="dark">
					<span class="theme-dark margin-right-xxs">
						<span
							class="border theme-selector-icon display-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span>Dark</span>
				</button>
			</li>
			<li class="theme display-block" role="menuitem">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="high-contrast">
					<span class="theme-high-contrast margin-right-xxs">
						<span
							class="border theme-selector-icon display-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span>High contrast</span>
				</button>
			</li>
		</ul>
	</div>
</div>

		</div>
	</div>
	<ul class="links" data-bi-name="footerlinks">
		<li class="manage-cookies-holder" hidden></li><li><a class="external-link-indicator" data-mscc-ic="false" href="/en-us/previous-versions/" data-bi-name="archivelink">Previous Versions</a></li>
				<li><a class="external-link-indicator" data-mscc-ic="false" href="https://techcommunity.microsoft.com/t5/microsoft-learn-blog/bg-p/MicrosoftLearnBlog" data-bi-name="bloglink">Blog</a></li>
				<li><a class="external-link-indicator" data-mscc-ic="false" href="/en-us/contribute/" data-bi-name="contributorGuide">Contribute</a></li><li><a class="external-link-indicator" data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy</a></li><li><a class="external-link-indicator" data-mscc-ic="false" href="/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li><li><a class="external-link-indicator" data-mscc-ic="false" href="https://www.microsoft.com/legal/intellectualproperty/Trademarks/" data-bi-name="trademarks">Trademarks</a></li><li>&copy; Microsoft 2024</li>
	</ul>
</footer></div></div><div
							id="ms--additional-resources"
							class="right-container column is-4-desktop display-none display-block-desktop"
							data-bi-name="pageactions"
							role="complementary"
							aria-label="Additional resources"
						>
							<div id="affixed-right-container" class="margin-top-sm-tablet" data-bi-name="right-column">
								<h2 id="ms--additional-resources-heading" class="title is-6 margin-top-md" hidden>Additional resources</h2>
								<section id="right-rail-events" data-bi-name="events-card" hidden></section>
								<section id="right-rail-training" data-bi-name="learning-resources-card" hidden></section>
								<section id="right-rail-recommendations" data-bi-name="recommendations" hidden></section>
								<nav id="side-doc-outline" class="doc-outline" data-bi-name="intopic toc" aria-label="In this article">
									<h3>In this article</h3>
								</nav>
								<section id="right-rail-qna" class="margin-top-xxs" data-bi-name="qna-link-card" hidden></section>
							</div>
						</div></div>
				<!--end of div.columns -->

			</section>
			<!--end of .primary-holder -->

			<!-- interactive container -->
			<aside id="interactive-container" class="interactive-container is-visible-interactive column has-body-background-dark ">
			</aside>
			<!-- end of interactive container -->
		</div>

	</div>
	<!--end of .mainContainer -->

	<section class="border-top has-default-focus is-hidden-interactive margin-top-sm "><footer id="footer" data-bi-name="footer" class="footer-layout uhf-container has-padding" role="contentinfo"><div class="display-flex gap-xs flex-wrap-wrap is-full-height padding-right-lg-desktop"><a
				data-mscc-ic="false"
				class="locale-selector-link button button-sm button-clear flex-shrink-0"
				href="#"
				data-bi-name="select-locale">
					<span class="icon" aria-hidden="true">
						<span class="docon docon-world"></span>
					</span>
					<span class="local-selector-link-text"></span></a><div class="ccpa-privacy-link" data-ccpa-privacy-link hidden>
<a
	href="https://aka.ms/yourcaliforniaprivacychoices"
	class="button button-sm button-clear flex-shrink-0"
	data-mscc-ic="false"
	data-bi-name="your-privacy-choices"
>
	<svg
		role="img"
		aria-label="California Consumer Privacy Act (CCPA) Opt-Out Icon"
		xmlns="http://www.w3.org/2000/svg"
		viewBox="0 0 30 14"
		xml:space="preserve"
		height="16"
		width="43"
		focusable="false"
	>
		<title>California Consumer Privacy Act (CCPA) Opt-Out Icon</title>
		<path d="M7.4 12.8h6.8l3.1-11.6H7.4C4.2 1.2 1.6 3.8 1.6 7s2.6 5.8 5.8 5.8z" style="fill-rule:evenodd;clip-rule:evenodd;fill:#fff"></path>
		<path d="M22.6 0H7.4c-3.9 0-7 3.1-7 7s3.1 7 7 7h15.2c3.9 0 7-3.1 7-7s-3.2-7-7-7zm-21 7c0-3.2 2.6-5.8 5.8-5.8h9.9l-3.1 11.6H7.4c-3.2 0-5.8-2.6-5.8-5.8z" style="fill-rule:evenodd;clip-rule:evenodd;fill:#06f"></path>
		<path d="M24.6 4c.2.2.2.6 0 .8L22.5 7l2.2 2.2c.2.2.2.6 0 .8-.2.2-.6.2-.8 0l-2.2-2.2-2.2 2.2c-.2.2-.6.2-.8 0-.2-.2-.2-.6 0-.8L20.8 7l-2.2-2.2c-.2-.2-.2-.6 0-.8.2-.2.6-.2.8 0l2.2 2.2L23.8 4c.2-.2.6-.2.8 0z" style="fill:#fff"></path>
		<path d="M12.7 4.1c.2.2.3.6.1.8L8.6 9.8c-.1.1-.2.2-.3.2-.2.1-.5.1-.7-.1L5.4 7.7c-.2-.2-.2-.6 0-.8.2-.2.6-.2.8 0L8 8.6l3.8-4.5c.2-.2.6-.2.9 0z" style="fill:#06f"></path>
	</svg>
	<span>Your Privacy Choices</span>
</a>

		</div>
		<div class="flex-shrink-0">
<div class="dropdown has-caret-up">
	<button class="dropdown-trigger button button-clear button-sm has-inner-focus theme-dropdown-trigger"
		aria-controls="theme-menu" aria-expanded="false" title="Theme" data-bi-name="theme">
		<span class="icon">
			<span class="docon docon-sun" aria-hidden="true"></span>
		</span>
		<span>Theme</span>
		<span class="icon expanded-indicator" aria-hidden="true">
			<span class="docon docon-chevron-down-light"></span>
		</span>
	</button>
	<div class="dropdown-menu" id="theme-menu" role="menu">
		<ul class="theme-selector padding-xxs" role="none">
			<li class="theme display-block" role="menuitem">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="light">
					<span class="theme-light margin-right-xxs">
						<span
							class="theme-selector-icon border display-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span>Light</span>
				</button>
			</li>
			<li class="theme display-block" role="menuitem">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="dark">
					<span class="theme-dark margin-right-xxs">
						<span
							class="border theme-selector-icon display-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span>Dark</span>
				</button>
			</li>
			<li class="theme display-block" role="menuitem">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="high-contrast">
					<span class="theme-high-contrast margin-right-xxs">
						<span
							class="border theme-selector-icon display-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span>High contrast</span>
				</button>
			</li>
		</ul>
	</div>
</div>

		</div>
	</div>
	<ul class="links" data-bi-name="footerlinks">
		<li class="manage-cookies-holder" hidden></li><li><a class="external-link-indicator" data-mscc-ic="false" href="/en-us/previous-versions/" data-bi-name="archivelink">Previous Versions</a></li>
				<li><a class="external-link-indicator" data-mscc-ic="false" href="https://techcommunity.microsoft.com/t5/microsoft-learn-blog/bg-p/MicrosoftLearnBlog" data-bi-name="bloglink">Blog</a></li>
				<li><a class="external-link-indicator" data-mscc-ic="false" href="/en-us/contribute/" data-bi-name="contributorGuide">Contribute</a></li><li><a class="external-link-indicator" data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy</a></li><li><a class="external-link-indicator" data-mscc-ic="false" href="/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li><li><a class="external-link-indicator" data-mscc-ic="false" href="https://www.microsoft.com/legal/intellectualproperty/Trademarks/" data-bi-name="trademarks">Trademarks</a></li><li>&copy; Microsoft 2024</li>
	</ul>
</footer>

	</section>

	<div id="action-panel" role="region" aria-label="Action Panel" class="action-panel has-default-focus" tabindex="-1"></div>
</body>
</html>